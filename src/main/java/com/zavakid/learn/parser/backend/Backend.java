package com.zavakid.learn.parser.backend;

import com.zavakid.learn.parser.intermediate.ICode;
import com.zavakid.learn.parser.intermediate.SymTabStack;
import com.zavakid.learn.parser.message.Message;
import com.zavakid.learn.parser.message.MessageHandler;
import com.zavakid.learn.parser.message.MessageListener;
import com.zavakid.learn.parser.message.MessageProducer;

public abstract class Backend implements MessageProducer {

    // Message handler delegate.
    protected static MessageHandler messageHandler = new MessageHandler();

    protected SymTabStack           symTabStack;
    protected ICode                 iCode;                                // intermediate code

    /**
     * Process the intermediate code and the symbol table generated by the
     * parser. To be implemented by a compiler or an interpreter subclass.
     * 
     * @param iCode the intermediate code.
     * @param symTab the symbol table.
     * @throws Exception if an error occurred.
     */
    public abstract void process(ICode iCode, SymTabStack symTabStack) throws Exception;

    public void addMessageListener(MessageListener listener) {
        messageHandler.addListener(listener);
    }

    public void removeMessageListener(MessageListener listener) {
        messageHandler.removeListener(listener);
    }

    public void sendMessage(Message message) {
        messageHandler.sendMessage(message);
    }

}
