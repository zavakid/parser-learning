package com.zavakid.learn.parser.frontend;

import com.zavakid.learn.parser.intermediate.ICode;
import com.zavakid.learn.parser.intermediate.SymTab;
import com.zavakid.learn.parser.message.Message;
import com.zavakid.learn.parser.message.MessageHandler;
import com.zavakid.learn.parser.message.MessageListener;
import com.zavakid.learn.parser.message.MessageProducer;

/**
 * A language-independent framework class. This abstract parser class will be
 * implemented by language-specific subclasses.
 */
public abstract class Parser implements MessageProducer {

    // generated symbol table
    protected static SymTab         symTab         = null;
    // message handler delegate
    protected static MessageHandler messageHandler = new MessageHandler();

    // scanner used with this parser
    protected Scanner               scanner;
    // intermediate code generated by this parser
    protected ICode                 iCode;

    protected Parser(Scanner scanner) {
        this.scanner = scanner;
        this.iCode = null;
    }

    /**
     * Parse a source program and generate the intermediate code and the symbol
     * table. To be implemented by a language-specific parser subclass.
     * 
     * @throws Exception if an error occurred.
     */
    public abstract void parse() throws Exception;

    /**
     * Return the number of syntax errors found by the parser. To be implemented
     * by a language-specific parser subclass.
     * 
     * @return the error count.
     */
    public abstract int getErrorCount();

    /**
     * Call the scanner's currentToken() method.
     * 
     * @return the current token.
     */
    public Token currentToken() {
        return scanner.currentToken();
    }

    /**
     * Call the scanner's nextToken() method.
     * 
     * @return the next token.
     * @throws Exception if an error occurred.
     */
    public Token nextToken() throws Exception {
        return scanner.nextToken();
    }

    /**
     * Add a parser message listener.
     * 
     * @param listener the message listener to add.
     */
    public void addMessageListener(MessageListener listener) {
        messageHandler.addListener(listener);
    }

    /**
     * Remove a parser message listener.
     * 
     * @param listener the message listener to remove.
     */
    public void removeMessageListener(MessageListener listener) {
        messageHandler.removeListener(listener);
    }

    /**
     * Notify listeners after setting the message.
     * 
     * @param message the message to set.
     */
    public void sendMessage(Message message) {
        messageHandler.sendMessage(message);
    }

}
